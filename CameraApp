Visual Studio Black Cordova Template

config.xml --> Add Camera plug-in

index.html
<!DOCTYPE html>
<html>
    <head>
    <!--
        Customize the content security policy in the meta tag below as needed. Add 'unsafe-inline' to default-src to enable inline JavaScript.
        For details, see http://go.microsoft.com/fwlink/?LinkID=617521
    -->
        <meta http-equiv="Content-Security-Policy" content="default-src 'self' data: gap: https://ssl.gstatic.com 'unsafe-eval'; style-src 'self' 'unsafe-inline'; media-src *">
        <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
        <meta name="format-detection" content="telephone=no">
        <meta name="msapplication-tap-highlight" content="no">
        <meta name="viewport" content="user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=device-width">
        <title>BlankCordovaApp6</title>
    </head>
    <body>
        <input type="button" id="button1" value="Take a photo" />
        <canvas id="mainCanvas" width="300" height="450"></canvas>
        <canvas id="colorPicker"width="50" height="50"></canvas>
         
        <script type="text/javascript" src="cordova.js"></script>
        <script type="text/javascript" src="scripts/platformOverrides.js"></script>
        <script type="text/javascript" src="scripts/index.js"></script>
    </body>
</html>



index.js

(function () {
    "use strict";

    document.addEventListener( 'deviceready', onDeviceReady.bind( this ), false );

    function onDeviceReady() {
        // Handle the Cordova pause and resume events
        document.addEventListener( 'pause', onPause.bind( this ), false );
        document.addEventListener('resume', onResume.bind(this), false);
        
        document.getElementById("button1").onclick = function () {
            navigator.camera.getPicture(onSuccess, onFail, {
                quality: 50,
                correctOrientation: true,
                encodingType: Camera.EncodingType.JPEG,
                destinationType: Camera.DestinationType.FILE_URI
            });
            
        function onSuccess(imageURI) {

            var canvas = document.getElementById('mainCanvas');
            var context = canvas.getContext('2d');
            var imageObj = new Image();

            imageObj.onload = function () {
                context.drawImage(imageObj, 10, 10, canvas.width, canvas.height);
            };
            imageObj.src = imageURI;
            var color = document.getElementById('colorPicker');
         }
         
        function onFail(message) {
            alert('Failed because: ' + message);
        }
        
        // TODO: Cordova has been loaded. Perform any initialization that requires Cordova here.
        var parentElement = document.getElementById('deviceready');
        var listeningElement = parentElement.querySelector('.listening');
        var receivedElement = parentElement.querySelector('.received');
        listeningElement.setAttribute('style', 'display:none;');
        receivedElement.setAttribute('style', 'display:block;');
    };

    function onPause() {
        // TODO: This application has been suspended. Save application state here.
    };

    function onResume() {
        // TODO: This application has been reactivated. Restore application state here.
    };
} );

  <hook type="before_complie" src="scripts/xcode8.js" />
  
  "use strict";

var fs    = require('fs');
var path  = require('path');

module.exports = function(context) {
    var encoding = 'utf-8';
    var filepath = 'platforms/ios/cordova/build.xcconfig';

    if (context.opts.cordova.platforms.indexOf('ios') === -1) return;
    if (!context.opts.options) return;
    if (!context.opts.options.buildConfig) return;


    var buildType = context.opts.options.release ? 'release' : 'debug';

    var buildConfigPath = context.opts.options.buildConfig;
    if (!path.isAbsolute(buildConfigPath)) {
      buildConfigPath = path.join(context.opts.projectRoot, context.opts.options.buildConfig);
    }
    var config = require(buildConfigPath);


    if (!config.ios) return;
    if (!config.ios[buildType]) return;
    if (!config.ios[buildType].developmentTeam) return;


    var xcconfig = fs.readFileSync(filepath, encoding);

    if (xcconfig.indexOf('DEVELOPMENT_TEAM') === -1) {
        var content = '\nDEVELOPMENT_TEAM = ' + config.ios[buildType].developmentTeam;

        xcconfig += content;
        fs.writeFileSync(filepath, xcconfig, encoding);
    }
};

